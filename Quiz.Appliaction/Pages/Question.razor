@page "/question"
@using Quiz.Appliaction.Services
@using Quiz.Data
@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@inject IGameService GameService

<style>

    body {
    background-color: rgba(213, 255, 249, 0.15);
    }

    .answer {
    min-width: 300px;
    margin: 25px;
    padding: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: skyblue;
    color: #000000;
    cursor: pointer;
    }

    .answer:hover {
    background-color: blue;
    color: #ffffff;
    }
</style>


@if (isLoading)
{
    <h5>@loaderText</h5>
}

@if (question != null && !isLoading)
{
    <div class="progress mb-3" style="height: 30px; width: 50%; background-color: #e0e0e0; border-radius: 10px; overflow: hidden; box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);">
        <div class="progress-bar" role="progressbar" style="width:@progressWidth%; background: linear-gradient(90deg, #4caf50, #81c784); color: white; font-weight: bold; font-size: 1rem; text-align: center; line-height: 30px; transition: width 0.5s ease-in-out;">
            @progressWidth%
        </div>
    </div>

    <h5>Pytanie za @question.Category pkt.</h5>
    <h4>@question.Content</h4>
    <br />
    <div style="max-width:700px; display: flex; align-items: center; justify-content:space-between; flex-wrap:wrap;">
        @foreach (var answer in question.Answers!)
        {
            <div class="answer" @onclick="() => SetAnswer(answer.Id)">@answer.Content</div>
        }
    </div>
}

@code {
    private int currentCategory;
    private string? loaderText;
    private bool isLoading;
    private QuestionDto? question;
    private int progressWidth = 0;

    override protected async Task OnInitializedAsync()
    {
        loaderText = "Trwa losowanie pytania ...";
        isLoading = true;
        progressWidth = GameService.GetProgress();
        await GetQuestion();
    }

    private async Task GetQuestion()
    {
        var cat = await Js.InvokeAsync<string>("localStorage.getItem", "_cookiecategory6");
        currentCategory = int.Parse(cat!);
        loaderText = "Trwa losowanie pytania ...";
        isLoading = true;
        question = await GameService.GetQuestion(currentCategory);

        isLoading = false;
        StateHasChanged();
    }


    private async Task SetAnswer(Guid answerId)
    {
        question = null;
        loaderText = "Sprawdzanie odpowiedzi ...";
        isLoading = true;
        var check = await GameService.CheckAnswer(answerId, currentCategory);
        if (check!.IsCorrect)
        {
            if (check!.NextCategory == 0)
            {
                GameService.ResetProgress();
                NavigationManager.NavigateTo("/success");
            }
            else
            {
                GameService.IncreaseProgress();
                await Js.InvokeVoidAsync("localStorage.setItem", "_cookiecategory6", check.NextCategory.ToString());
                NavigationManager.NavigateTo($"/goodanswer");
            }
        }
        else
        {
            GameService.ResetProgress();
            NavigationManager.NavigateTo("/gameover");
        }
        isLoading = false;
        StateHasChanged();
    }
}
